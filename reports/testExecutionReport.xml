<?xml version='1.0'?>
<testExecutions version='1'>
    <file path='src/app/expo/address/address.component.spec.ts'>
        <testCase name='AddressComponent should create' duration='53'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///AddressComponent/ɵfac.js:4:44)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='14'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///AddressComponent/ɵfac.js:4:44)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='10'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///AddressComponent/ɵfac.js:4:44)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='12'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///AddressComponent/ɵfac.js:4:44)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='8'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='6'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='51'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'control')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:36)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='40'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'control')
    at AddressComponent.call [as ngOnInit] (src/app/expo/address/address.component.ts:15:36)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AddressComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/auth/auth.component.spec.ts'>
        <testCase name='AuthComponent should create' duration='8'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='25'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='4'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='4'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='9'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='7'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[SocialAuthService -> SocialAuthServiceConfig -> SocialAuthServiceConfig]: 
  NullInjectorError: No provider for SocialAuthServiceConfig!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'SocialAuthService', 'SocialAuthServiceConfig', 'SocialAuthServiceConfig' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at Module.ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (node_modules/@abacritt/angularx-social-login/fesm2020/abacritt-angularx-social-login.mjs:408:103)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='8'>
            <failure message='TestCase failed'>Error: NG0304: 'asl-google-signin-button' is not a known element (used in the 'AuthComponent' component template):
1. If 'asl-google-signin-button' is an Angular component, then verify that it is a part of an @NgModule where this component is declared.
2. If 'asl-google-signin-button' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.
error properties: Object({ code: 304 })
    at validateElementIsKnown (node_modules/@angular/core/fesm2020/core.mjs:4888:23)
    at ɵɵelementStart (node_modules/@angular/core/fesm2020/core.mjs:13584:9)
    at ɵɵelement (node_modules/@angular/core/fesm2020/core.mjs:13656:5)
    at templateFn (ng:///AuthComponent.js:17:9)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10263:13)
    at renderComponent (node_modules/@angular/core/fesm2020/core.mjs:11434:5)
    at renderChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10122:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10288:13)
    at ComponentFactory.create (node_modules/@angular/core/fesm2020/core.mjs:12178:13)
</failure>
        </testCase>
        <testCase name='AuthComponent should create' duration='6'/>
        <testCase name='AuthComponent should create' duration='6'/>
        <testCase name='AuthComponent should create' duration='4'/>
        <testCase name='AuthComponent should create' duration='6'/>
        <testCase name='AuthComponent should create' duration='13'/>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AuthComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/app.component.spec.ts'>
        <testCase name='AppComponent should create the app' duration='9'/>
        <testCase name='AppComponent should have as title &apos;kaiglo-test&apos;' duration='4'/>
        <testCase name='AppComponent should render title' duration='575'>
            <failure message='TestCase failed'>Expected undefined to contain 'kaiglo-test app is running!'.
    at &lt;Jasmine>
    at UserContext.apply (src/app/app.component.spec.ts:33:66)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
    at ProxyZoneSpec.onInvoke (node_modules/zone.js/fesm2015/zone-testing.js:287:39)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:374:52)
</failure>
        </testCase>
        <testCase name='AppComponent should render title' duration='46'>
            <failure message='TestCase failed'>Expected undefined to contain 'kaiglo-test app is running!'.
    at &lt;Jasmine>
    at UserContext.apply (src/app/app.component.spec.ts:33:66)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
    at ProxyZoneSpec.onInvoke (node_modules/zone.js/fesm2015/zone-testing.js:287:39)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:374:52)
</failure>
        </testCase>
        <testCase name='AppComponent should have as title &apos;kaiglo-test&apos;' duration='3'/>
        <testCase name='AppComponent should create the app' duration='2'/>
        <testCase name='AppComponent should have as title &apos;kaiglo-test&apos;' duration='7'/>
        <testCase name='AppComponent should create the app' duration='2'/>
        <testCase name='AppComponent should render title' duration='29'>
            <failure message='TestCase failed'>Expected undefined to contain 'kaiglo-test app is running!'.
    at &lt;Jasmine>
    at UserContext.apply (src/app/app.component.spec.ts:33:66)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
    at ProxyZoneSpec.onInvoke (node_modules/zone.js/fesm2015/zone-testing.js:287:39)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:374:52)
</failure>
        </testCase>
        <testCase name='AppComponent should have as title &apos;kaiglo-test&apos;' duration='9'/>
        <testCase name='AppComponent should create the app' duration='4'/>
        <testCase name='AppComponent should render title' duration='5'>
            <failure message='TestCase failed'>Expected undefined to contain 'kaiglo-test app is running!'.
    at &lt;Jasmine>
    at UserContext.apply (src/app/app.component.spec.ts:33:66)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
    at ProxyZoneSpec.onInvoke (node_modules/zone.js/fesm2015/zone-testing.js:287:39)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:374:52)
</failure>
        </testCase>
        <testCase name='AppComponent should create the app' duration='24'/>
        <testCase name='AppComponent should create the app' duration='6'/>
        <testCase name='AppComponent should create the app' duration='3'/>
        <testCase name='AppComponent should create the app' duration='3'/>
        <testCase name='AppComponent should create the app' duration='6'/>
        <testCase name='AppComponent should create the app' duration='4'/>
        <testCase name='AppComponent should create the app' duration='3'/>
        <testCase name='AppComponent should create the app' duration='6'/>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='AppComponent should create the app' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/pages/temp/temp.component.spec.ts'>
        <testCase name='TempComponent should create' duration='22'/>
        <testCase name='TempComponent should create' duration='8'/>
        <testCase name='TempComponent should create' duration='9'/>
        <testCase name='TempComponent should create' duration='34'/>
        <testCase name='TempComponent should create' duration='9'/>
        <testCase name='TempComponent should create' duration='35'/>
        <testCase name='TempComponent should create' duration='4'/>
        <testCase name='TempComponent should create' duration='5'/>
        <testCase name='TempComponent should create' duration='7'/>
        <testCase name='TempComponent should create' duration='8'/>
        <testCase name='TempComponent should create' duration='7'/>
        <testCase name='TempComponent should create' duration='51'/>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TempComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/pages/home/home.component.spec.ts'>
        <testCase name='HomeComponent should create' duration='21'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='14'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='16'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='15'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='16'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='19'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='19'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='16'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='16'>
            <failure message='TestCase failed'>Error: NG0304: 'app-navbar' is not a known element (used in the 'HomeComponent' component template):
1. If 'app-navbar' is an Angular component, then verify that it is a part of an @NgModule where this component is declared.
2. If 'app-navbar' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.
error properties: Object({ code: 304 })
    at validateElementIsKnown (node_modules/@angular/core/fesm2020/core.mjs:4888:23)
    at ɵɵelementStart (node_modules/@angular/core/fesm2020/core.mjs:13584:9)
    at ɵɵelement (node_modules/@angular/core/fesm2020/core.mjs:13656:5)
    at templateFn (ng:///HomeComponent.js:168:9)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10263:13)
    at renderComponent (node_modules/@angular/core/fesm2020/core.mjs:11434:5)
    at renderChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10122:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10288:13)
    at ComponentFactory.create (node_modules/@angular/core/fesm2020/core.mjs:12178:13)
</failure>
        </testCase>
        <testCase name='HomeComponent should create' duration='19'/>
        <testCase name='HomeComponent should create' duration='20'/>
        <testCase name='HomeComponent should create' duration='16'/>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/expo/user-details/user-details.component.spec.ts'>
        <testCase name='UserDetailsComponent should create' duration='5'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='7'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='5'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='8'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='5'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='7'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[FormGroupDirective -> FormGroupDirective]: 
  NullInjectorError: No provider for FormGroupDirective!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'FormGroupDirective', 'FormGroupDirective' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
    at getOrCreateInjectable (node_modules/@angular/core/fesm2020/core.mjs:3246:12)
    at ɵɵdirectiveInject (node_modules/@angular/core/fesm2020/core.mjs:10041:12)
    at NodeInjectorFactory.factory (ng:///UserDetailsComponent/ɵfac.js:4:48)
    at getNodeInjectable (node_modules/@angular/core/fesm2020/core.mjs:3431:44)
    at createRootComponent (node_modules/@angular/core/fesm2020/core.mjs:12297:35)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='6'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='5'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='47'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='5'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of null (reading 'get')
    at UserDetailsComponent.call [as ngOnInit] (src/app/expo/user-details/user-details.component.ts:15:44)
    at callHook (node_modules/@angular/core/fesm2020/core.mjs:2434:22)
    at callHooks (node_modules/@angular/core/fesm2020/core.mjs:2403:17)
    at executeInitAndCheckHooks (node_modules/@angular/core/fesm2020/core.mjs:2354:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10341:21)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at apply (node_modules/@angular/core/fesm2020/testing.mjs:139:22)
    at _ZoneDelegate.invoke (node_modules/zone.js/fesm2015/zone.js:375:26)
</failure>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='UserDetailsComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/pages/test/test.component.spec.ts'>
        <testCase name='TestComponent should go to temp page' duration='12'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='10'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should create' duration='8'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='14'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='11'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='10'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='52'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be route test' duration='23'/>
        <testCase name='TestComponent should create' duration='10'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='15'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should create' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be route test' duration='11'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='8'/>
        <testCase name='TestComponent should create' duration='2'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='72'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should create' duration='29'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='28'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should create' duration='26'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should create' duration='55'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be route test' duration='21'/>
        <testCase name='TestComponent should be equal in arrays' duration='11'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='20'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='2'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='28'/>
        <testCase name='TestComponent should go to temp page' duration='14'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='81'/>
        <testCase name='TestComponent should create' duration='38'/>
        <testCase name='TestComponent should be equal in arrays' duration='28'/>
        <testCase name='TestComponent should be route test' duration='183'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='15'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='29'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='71'/>
        <testCase name='TestComponent should be route test' duration='14'/>
        <testCase name='TestComponent should go to temp page' duration='9'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='13'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should create' duration='19'/>
        <testCase name='TestComponent should create' duration='36'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='11'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='80'/>
        <testCase name='TestComponent should be equal in arrays' duration='12'/>
        <testCase name='TestComponent should create' duration='11'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should create' duration='354'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='19'/>
        <testCase name='TestComponent should be route test' duration='20'/>
        <testCase name='TestComponent should create' duration='55'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='276'/>
        <testCase name='TestComponent should go to temp page' duration='153'/>
        <testCase name='TestComponent should create' duration='298'/>
        <testCase name='TestComponent should be route test' duration='422'/>
        <testCase name='TestComponent should be equal in arrays' duration='87'/>
        <testCase name='TestComponent should create' duration='20'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='92'/>
        <testCase name='TestComponent should create' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='133'/>
        <testCase name='TestComponent should create' duration='6'/>
        <testCase name='TestComponent should be route test' duration='20'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='59'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:71:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should go to temp page' duration='6'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:71:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be route test' duration='20'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:71:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should create' duration='17'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:71:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should go to temp page' duration='43'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be route test' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be equal in arrays' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be route test' duration='44'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be equal in arrays' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should create' duration='3'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should go to temp page' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:79:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should go to temp page' duration='44'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:75:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be route test' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:75:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should create' duration='4'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:75:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be equal in arrays' duration='3'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'length')
    at templateFn (ng:///TestComponent.js:75:47)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='52'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should go to temp page' duration='9'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should create' duration='40'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='50'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='6'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='39'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='30'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='84'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should create' duration='33'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='67'/>
        <testCase name='TestComponent should go to temp page' duration='8'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should be route test' duration='20'/>
        <testCase name='TestComponent should be equal in arrays' duration='28'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='47'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='134'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='12'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should create' duration='8'/>
        <testCase name='TestComponent should be route test' duration='53'/>
        <testCase name='TestComponent should go to temp page' duration='30'/>
        <testCase name='TestComponent should create' duration='17'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should create' duration='16'/>
        <testCase name='TestComponent should be route test' duration='12'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='147'/>
        <testCase name='TestComponent should be equal in arrays' duration='9'/>
        <testCase name='TestComponent should go to temp page' duration='11'/>
        <testCase name='TestComponent should be route test' duration='32'/>
        <testCase name='TestComponent should be route test' duration='21'/>
        <testCase name='TestComponent should go to temp page' duration='15'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='775'/>
        <testCase name='TestComponent should be equal in arrays' duration='252'/>
        <testCase name='TestComponent should create' duration='160'/>
        <testCase name='TestComponent should go to temp page' duration='107'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='9'/>
        <testCase name='TestComponent should be route test' duration='43'/>
        <testCase name='TestComponent should create' duration='29'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='217'/>
        <testCase name='TestComponent should go to temp page' duration='112'/>
        <testCase name='TestComponent should be route test' duration='10'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='60'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='51'/>
        <testCase name='TestComponent should be route test' duration='57'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should create' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='49'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should be route test' duration='11'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='2'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='66'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='38'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should be equal in arrays' duration='7'/>
        <testCase name='TestComponent should go to temp page' duration='9'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='86'/>
        <testCase name='TestComponent should create' duration='11'/>
        <testCase name='TestComponent should go to temp page' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='19'/>
        <testCase name='TestComponent should be equal in arrays' duration='9'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='51'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='76'/>
        <testCase name='TestComponent should go to temp page' duration='9'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should be equal in arrays' duration='54'/>
        <testCase name='TestComponent should create' duration='8'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='9'/>
        <testCase name='TestComponent should create' duration='274'/>
        <testCase name='TestComponent should go to temp page' duration='11'/>
        <testCase name='TestComponent should be route test' duration='18'/>
        <testCase name='TestComponent should be equal in arrays' duration='35'/>
        <testCase name='TestComponent should go to temp page' duration='31'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='42'/>
        <testCase name='TestComponent should be equal in arrays' duration='43'/>
        <testCase name='TestComponent should create' duration='40'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='277'/>
        <testCase name='TestComponent should go to temp page' duration='6'/>
        <testCase name='TestComponent should be route test' duration='7'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should create' duration='101'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='13'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='27'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should be equal in arrays' duration='199'/>
        <testCase name='TestComponent should be route test' duration='10'/>
        <testCase name='TestComponent should go to temp page' duration='9'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='20'/>
        <testCase name='TestComponent should be route test' duration='25'/>
        <testCase name='TestComponent should go to temp page' duration='16'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='14'/>
        <testCase name='TestComponent should be route test' duration='11'/>
        <testCase name='TestComponent should be equal in arrays' duration='8'/>
        <testCase name='TestComponent should create' duration='51'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='345'/>
        <testCase name='TestComponent should be equal in arrays' duration='30'/>
        <testCase name='TestComponent should create' duration='6'/>
        <testCase name='TestComponent should go to temp page' duration='142'/>
        <testCase name='TestComponent should create' duration='94'/>
        <testCase name='TestComponent should be equal in arrays' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='7'/>
        <testCase name='TestComponent should be route test' duration='6'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should create' duration='3'/>
        <testCase name='TestComponent should go to temp page' duration='338'/>
        <testCase name='TestComponent should be route test' duration='34'/>
        <testCase name='TestComponent should create' duration='194'/>
        <testCase name='TestComponent should be equal in arrays' duration='128'/>
        <testCase name='TestComponent should be route test' duration='1071'/>
        <testCase name='TestComponent should create' duration='120'/>
        <testCase name='TestComponent should go to temp page' duration='195'/>
        <testCase name='TestComponent should be equal in arrays' duration='128'/>
        <testCase name='TestComponent should create' duration='106'/>
        <testCase name='TestComponent should go to temp page' duration='4'/>
        <testCase name='TestComponent should be route test' duration='8'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='274'/>
        <testCase name='TestComponent should be equal in arrays' duration='20'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='61'/>
        <testCase name='TestComponent should go to temp page' duration='34'/>
        <testCase name='TestComponent should create' duration='4'/>
        <testCase name='TestComponent should be equal in arrays' duration='3'/>
        <testCase name='TestComponent should be route test' duration='5'/>
        <testCase name='TestComponent should be route test' duration='42'/>
        <testCase name='TestComponent should create' duration='12'/>
        <testCase name='TestComponent should be equal in arrays' duration='4'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should create' duration='5'/>
        <testCase name='TestComponent should go to temp page' duration='5'/>
        <testCase name='TestComponent should be route test' duration='9'/>
        <testCase name='TestComponent should be equal in arrays' duration='35'/>
    </file>
    <file path='src/app/expo/expo.component.spec.ts'>
        <testCase name='ExpoComponent should create' duration='11'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='15'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='39'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='11'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='12'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at ChainedInjector.get (node_modules/@angular/core/fesm2020/core.mjs:12084:36)
    at lookupTokenUsingModuleInjector (node_modules/@angular/core/fesm2020/core.mjs:3201:39)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='19'>
            <failure message='TestCase failed'>Error: NG0304: 'app-user-details' is not a known element (used in the 'ExpoComponent' component template):
1. If 'app-user-details' is an Angular component, then verify that it is a part of an @NgModule where this component is declared.
2. If 'app-user-details' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.
error properties: Object({ code: 304 })
    at validateElementIsKnown (node_modules/@angular/core/fesm2020/core.mjs:4888:23)
    at ɵɵelementStart (node_modules/@angular/core/fesm2020/core.mjs:13584:9)
    at ɵɵelement (node_modules/@angular/core/fesm2020/core.mjs:13656:5)
    at templateFn (ng:///ExpoComponent.js:91:9)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10263:13)
    at renderComponent (node_modules/@angular/core/fesm2020/core.mjs:11434:5)
    at renderChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10122:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10288:13)
    at ComponentFactory.create (node_modules/@angular/core/fesm2020/core.mjs:12178:13)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='15'>
            <failure message='TestCase failed'>Error: NG0304: 'app-user-details' is not a known element (used in the 'ExpoComponent' component template):
1. If 'app-user-details' is an Angular component, then verify that it is a part of an @NgModule where this component is declared.
2. If 'app-user-details' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.
error properties: Object({ code: 304 })
    at validateElementIsKnown (node_modules/@angular/core/fesm2020/core.mjs:4888:23)
    at ɵɵelementStart (node_modules/@angular/core/fesm2020/core.mjs:13584:9)
    at ɵɵelement (node_modules/@angular/core/fesm2020/core.mjs:13656:5)
    at templateFn (ng:///ExpoComponent.js:91:9)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10263:13)
    at renderComponent (node_modules/@angular/core/fesm2020/core.mjs:11434:5)
    at renderChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10122:9)
    at renderView (node_modules/@angular/core/fesm2020/core.mjs:10288:13)
    at ComponentFactory.create (node_modules/@angular/core/fesm2020/core.mjs:12178:13)
</failure>
        </testCase>
        <testCase name='ExpoComponent should create' duration='16'/>
        <testCase name='ExpoComponent should create' duration='19'/>
        <testCase name='ExpoComponent should create' duration='12'/>
        <testCase name='ExpoComponent should create' duration='9'/>
        <testCase name='ExpoComponent should create' duration='17'/>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='ExpoComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/components/navbar/navbar.component.spec.ts'>
        <testCase name='NavbarComponent should create' duration='4'/>
        <testCase name='NavbarComponent should create' duration='7'/>
        <testCase name='NavbarComponent should create' duration='3'/>
        <testCase name='NavbarComponent should create' duration='4'/>
        <testCase name='NavbarComponent should create' duration='5'/>
        <testCase name='NavbarComponent should create' duration='3'/>
        <testCase name='NavbarComponent should create' duration='3'/>
        <testCase name='NavbarComponent should create' duration='4'/>
        <testCase name='NavbarComponent should create' duration='4'/>
        <testCase name='NavbarComponent should create' duration='4'/>
        <testCase name='NavbarComponent should create' duration='3'/>
        <testCase name='NavbarComponent should create' duration='5'/>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='NavbarComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/components/footer/footer.component.spec.ts'>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='6'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='6'/>
        <testCase name='FooterComponent should create' duration='5'/>
        <testCase name='FooterComponent should create' duration='25'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='3'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='4'/>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='FooterComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/components/card/card.component.spec.ts'>
        <testCase name='CardComponent should create' duration='10'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='21'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='9'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='12'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='14'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='16'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='8'>
            <failure message='TestCase failed'>TypeError: Cannot read properties of undefined (reading 'productUrl')
    at templateFn (ng:///CardComponent.js:24:41)
    at executeTemplate (node_modules/@angular/core/fesm2020/core.mjs:10441:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10326:13)
    at refreshComponent (node_modules/@angular/core/fesm2020/core.mjs:11385:13)
    at refreshChildComponents (node_modules/@angular/core/fesm2020/core.mjs:10116:9)
    at refreshView (node_modules/@angular/core/fesm2020/core.mjs:10376:13)
    at detectChangesInternal (node_modules/@angular/core/fesm2020/core.mjs:11529:9)
    at RootViewRef.detectChanges (node_modules/@angular/core/fesm2020/core.mjs:12020:9)
    at ComponentFixture._tick (node_modules/@angular/core/fesm2020/testing.mjs:126:32)
    at node_modules/@angular/core/fesm2020/testing.mjs:139:22
</failure>
        </testCase>
        <testCase name='CardComponent should create' duration='5'/>
        <testCase name='CardComponent should create' duration='7'/>
        <testCase name='CardComponent should create' duration='5'/>
        <testCase name='CardComponent should create' duration='8'/>
        <testCase name='CardComponent should create' duration='5'/>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='CardComponent should create' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/utils/services/todo.service.spec.ts'>
        <testCase name='TodoService should be created' duration='2'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='TodoService should be created' duration='2'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='TodoService should be created' duration='2'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='TodoService should be created' duration='5'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[TodoService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'TodoService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///TodoService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='TodoService should be created' duration='2'/>
        <testCase name='TodoService should be created' duration='3'/>
        <testCase name='TodoService should be created' duration='1'/>
        <testCase name='TodoService should be created' duration='2'/>
        <testCase name='TodoService should be created' duration='2'/>
        <testCase name='TodoService should be created' duration='14'/>
        <testCase name='TodoService should be created' duration='2'/>
        <testCase name='TodoService should be created' duration='1'/>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='TodoService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
    <file path='src/app/pages/home/home.service.spec.ts'>
        <testCase name='HomeService should be created' duration='2'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='HomeService should be created' duration='4'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='HomeService should be created' duration='2'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='HomeService should be created' duration='12'>
            <failure message='TestCase failed'>NullInjectorError: R3InjectorError(DynamicTestModule)[HomeService -> HttpClient -> HttpClient]: 
  NullInjectorError: No provider for HttpClient!
error properties: Object({ ngTempTokenPath: null, ngTokenPath: [ 'HomeService', 'HttpClient', 'HttpClient' ] })
    at NullInjector.get (node_modules/@angular/core/fesm2020/core.mjs:7493:27)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7914:33)
    at injectInjectorOnly (node_modules/@angular/core/fesm2020/core.mjs:618:33)
    at ɵɵinject (node_modules/@angular/core/fesm2020/core.mjs:622:60)
    at Object.factory (ng:///HomeService/ɵfac.js:4:39)
    at R3Injector.hydrate (node_modules/@angular/core/fesm2020/core.mjs:8015:35)
    at R3Injector.get (node_modules/@angular/core/fesm2020/core.mjs:7903:33)
    at TestBedImpl.inject (node_modules/@angular/core/fesm2020/testing.mjs:24209:52)
    at Function.inject (node_modules/@angular/core/fesm2020/testing.mjs:24068:37)
</failure>
        </testCase>
        <testCase name='HomeService should be created' duration='21'/>
        <testCase name='HomeService should be created' duration='3'/>
        <testCase name='HomeService should be created' duration='1'/>
        <testCase name='HomeService should be created' duration='1'/>
        <testCase name='HomeService should be created' duration='2'/>
        <testCase name='HomeService should be created' duration='1'/>
        <testCase name='HomeService should be created' duration='2'/>
        <testCase name='HomeService should be created' duration='3'/>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
        <testCase name='HomeService should be created' duration='0'>
            <skipped message='TestCase skipped'/>
        </testCase>
    </file>
</testExecutions>